// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwivelAcademyCMS.Infra.DAL.DBContext;

namespace SwivelAcademyCMS.Infra.DAL.Migrations
{
    [DbContext(typeof(SwivelDbContext))]
    [Migration("20210620050147_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseUnit")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseUnit = 4,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 338, DateTimeKind.Unspecified).AddTicks(3332), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 345, DateTimeKind.Unspecified).AddTicks(6732), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Introduction to Programming Using C#"
                        },
                        new
                        {
                            Id = 2,
                            CourseUnit = 3,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(276), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(309), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Algorithms"
                        },
                        new
                        {
                            Id = 3,
                            CourseUnit = 2,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(325), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(329), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Human Computer Interaction (HCI)"
                        },
                        new
                        {
                            Id = 4,
                            CourseUnit = 4,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(509), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(517), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Compiler Construction"
                        },
                        new
                        {
                            Id = 5,
                            CourseUnit = 3,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(526), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(529), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Advanced Algebra"
                        },
                        new
                        {
                            Id = 6,
                            CourseUnit = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(557), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(562), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Statistics"
                        },
                        new
                        {
                            Id = 7,
                            CourseUnit = 2,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(570), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 346, DateTimeKind.Unspecified).AddTicks(574), new TimeSpan(0, 1, 0, 0, 0)),
                            Title = "Computer Operations"
                        });
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(852), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(918), new TimeSpan(0, 1, 0, 0, 0)),
                            Firstname = "James",
                            Lastname = "Stuart"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(3188), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(3219), new TimeSpan(0, 1, 0, 0, 0)),
                            Firstname = "Michael",
                            Lastname = "Oyelowo"
                        });
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 5,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 6,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 4,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(7014), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(7042), new TimeSpan(0, 1, 0, 0, 0)),
                            Firstname = "Adewale",
                            Lastname = "Rowland"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(9136), new TimeSpan(0, 1, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2021, 6, 20, 6, 1, 46, 350, DateTimeKind.Unspecified).AddTicks(9159), new TimeSpan(0, 1, 0, 0, 0)),
                            Firstname = "Festus",
                            Lastname = "Emeka"
                        });
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.TeacherCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 5,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 6,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 4,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.StudentCourse", b =>
                {
                    b.HasOne("SwivelAcademyCMS.ApplicationCore.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwivelAcademyCMS.ApplicationCore.Entities.Student", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.TeacherCourse", b =>
                {
                    b.HasOne("SwivelAcademyCMS.ApplicationCore.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwivelAcademyCMS.ApplicationCore.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.Student", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SwivelAcademyCMS.ApplicationCore.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
